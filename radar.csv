name,ring,quadrant,isNew,status,description
React.js,Adopt,Languages & Frameworks,FALSE,no change,"<p>Among the many front-end JavaScript frameworks, <a href=""http://facebook.github.io/react/"" target=""_blank"" aria-label=""React.js. This is an external link. Opens in new tab"" class=""pop-out""><strong>React.js</strong><span class=""pop-out-icon""></span></a> stands out for its simplicity, flexibility, and performance. Its design around a reactive, component-based architecture and data binding makes it easier to manage complex application states and rendering logic. At Mable, we are exploring React.js as an alternative for front-end development due to its growing ecosystem, strong community support, and proven success across a wide range of projects. React's emphasis on reusability and composability aligns well with our goals for scalable and maintainable application development, making it a promising choice for future initiatives.</p>"
Angular,Adopt,Languages & Frameworks,FALSE,no change,"<p><a href=""https://angular.io/"" target=""_blank"" aria-label=""Angular. This is an external link. Opens in new tab"" class=""pop-out""><strong>Angular</strong><span class=""pop-out-icon""></span></a> remains a powerful choice for building robust, feature-rich web applications. As a full-fledged framework, Angular provides a comprehensive set of tools and best practices, including data binding, dependency injection, and a modular architecture, which simplifies the development of complex enterprise-level applications. At Mable, we value Angular's opinionated approach and built-in capabilities, which reduce reliance on third-party libraries and provide consistency across projects. Its long-term support by Google and strong ecosystem make Angular a reliable option for building scalable and maintainable front-end applications that align with our technical requirements.</p>"
React Hooks,Adopt,Languages & Frameworks,FALSE,moved in,"<p><a href=""https://react.dev/"" target=""_blank"" aria-label=""React Hooks. This is an external link. Opens in new tab"" class=""pop-out""><strong>React Hooks</strong><span class=""pop-out-icon""></span></a> revolutionised React development by introducing a simpler and more intuitive way to manage state and lifecycle events within functional components. By eliminating the need for class-based components in most cases, Hooks have made React development more accessible and streamlined, while enabling powerful features like reusable custom Hooks for abstracting logic. At Mable, React Hooks align with our goals for writing clean, maintainable, and reusable code, offering an elegant way to handle side effects, data fetching, and application state. Their growing adoption across the React ecosystem ensures they remain a foundational part of our front-end strategy moving forward.</p>"
Tailwind CSS,Trial,Languages & Frameworks,FALSE,no change,"<p><a href=""https://tailwindcss.com/"" target=""_blank"" aria-label=""Tailwind CSS. This is an external link. Opens in new tab"" class=""pop-out""><strong>Tailwind CSS</strong><span class=""pop-out-icon""></span></a> is a utility-first CSS framework that enables rapid UI development with a consistent, design-driven approach. Unlike traditional CSS frameworks, Tailwind focuses on composable utility classes, allowing developers to build custom designs without leaving their HTML. At Mable, Tailwind CSS offers a streamlined and efficient way to create responsive and accessible interfaces while reducing reliance on custom CSS. Its theming capabilities and pre-configured design tokens align with our goals for consistency across projects, making it an excellent choice for maintaining a scalable and cohesive design system. Tailwind's focus on developer productivity and flexibility makes it a valuable addition to our toolkit.</p>"
Next.js,Trial,Languages & Frameworks,FALSE,no change,"<p><a href=""https://nextjs.org/"" target=""_blank"" aria-label=""Next.js. This is an external link. Opens in new tab"" class=""pop-out""><strong>Next.js</strong><span class=""pop-out-icon""></span></a> is a powerful React-based framework for building fast, scalable, and optimised web applications. Combining server-side rendering (SSR), static site generation (SSG), and client-side rendering (CSR), Next.js offers unmatched flexibility for delivering high-performance, SEO-friendly applications. At Mable, Next.js is an attractive option for projects requiring dynamic content delivery and seamless user experiences, thanks to its built-in routing, API routes, and full-stack capabilities. Its robust developer tools, growing ecosystem, and focus on scalability and maintainability align with our long-term goals for delivering efficient and future-proof web solutions.</p>"
React Redux,Trial,Languages & Frameworks,FALSE,moved out,"<p><a href=""https://react-redux.js.org/"" target=""_blank"" aria-label=""React Redux. This is an external link. Opens in new tab"" class=""pop-out""><strong>React Redux</strong><span class=""pop-out-icon""></span></a> is the official state management library for React, offering a predictable way to manage the state of complex applications. By centralising the application state and enabling a unidirectional data flow, React Redux simplifies debugging and state consistency, particularly in large-scale projects. At Mable, React Redux provides a reliable and scalable solution for managing shared application state across components, ensuring predictable behavior even as applications grow in complexity. With its mature ecosystem, time-travel debugging, and middleware capabilities, React Redux aligns well with our goals for building maintainable and efficient React applications.</p>"
TypeScript,Adopt,Languages & Frameworks,FALSE,moved in,"<p><a href=""https://www.typescriptlang.org/"" target=""_blank"" aria-label=""TypeScript. This is an external link. Opens in new tab"" class=""pop-out""><strong>TypeScript</strong><span class=""pop-out-icon""></span></a> is a strongly typed superset of JavaScript that enhances code quality and maintainability by introducing static type-checking and powerful tooling. By catching errors during development rather than at runtime, TypeScript significantly reduces bugs and improves developer productivity. At Mable, TypeScript aligns with our focus on building reliable, scalable, and maintainable applications, especially as our codebase grows in complexity. Its seamless integration with modern frameworks like React and Next.js, along with robust IDE support, makes it an indispensable tool for improving code clarity, collaboration, and long-term maintainability across projects.</p>"
PostCSS,Assess,Languages & Frameworks,FALSE,no change,"<p><a href=""https://postcss.org/"" target=""_blank"" aria-label=""PostCSS. This is an external link. Opens in new tab"" class=""pop-out""><strong>PostCSS</strong><span class=""pop-out-icon""></span></a> is a versatile CSS processing tool that transforms styles using JavaScript plugins. It enables developers to extend CSS with features like custom properties, nested rules, and future syntax through plugins, while maintaining compatibility with modern browsers. At Mable, PostCSS serves as a foundational tool in our front-end build pipeline, powering frameworks like Tailwind CSS and enabling efficient, scalable CSS development. Its modular architecture allows us to customise our CSS workflow, optimise performance, and streamline the implementation of consistent design patterns, making it an essential part of our tech stack for modern, maintainable styling solutions.</p>"
Material UI,Assess,Languages & Frameworks,FALSE,no change,"<p><a href=""https://mui.com/"" target=""_blank"" aria-label=""Material-UI. This is an external link. Opens in new tab"" class=""pop-out""><strong>Material-UI (MUI)</strong><span class=""pop-out-icon""></span></a> is a React-based component library that implements Google’s Material Design system, providing a cohesive and modern UI toolkit for building responsive, accessible, and visually appealing applications. With its pre-built components, customisation capabilities, and theming support, MUI accelerates development while maintaining a consistent design language. At Mable, Material-UI is well-suited for projects that require fast prototyping and a polished user experience out of the box. Its integration with React, extensive documentation, and active community make it a valuable resource for crafting scalable and user-friendly interfaces aligned with our design standards and goals.</p>"
Ionic Framework,Trial,Languages & Frameworks,FALSE,no change,"<p><a href=""https://ionicframework.com/"" target=""_blank"" aria-label=""Ionic Framework. This is an external link. Opens in new tab"" class=""pop-out""><strong>Ionic Framework</strong><span class=""pop-out-icon""></span></a> is a powerful open-source framework for building cross-platform mobile and web applications with a single codebase. Leveraging web technologies such as HTML, CSS, and JavaScript, Ionic allows developers to create native-like experiences for iOS, Android, and the web. At Mable, Ionic is an attractive option for projects requiring fast mobile app development and seamless integration with various device features. Its rich set of pre-built UI components, extensive documentation, and active community support make it a compelling choice for delivering scalable, performant, and maintainable applications across multiple platforms.</p>"
Twitter Bootstrap,Assess,Languages & Frameworks,FALSE,no change,"<p><a href=""https://getbootstrap.com/"" target=""_blank"" aria-label=""Twitter Bootstrap. This is an external link. Opens in new tab"" class=""pop-out""><strong>Twitter Bootstrap</strong><span class=""pop-out-icon""></span></a> is a widely used, open-source front-end framework that provides a collection of pre-built responsive design components and utilities for building modern, mobile-first web applications. With its grid system, reusable components, and JavaScript plugins, Bootstrap helps speed up development and ensures consistent, responsive layouts across different screen sizes. At Mable, Bootstrap continues to be a reliable option for rapid prototyping and building user interfaces that are both simple and highly functional. While other frameworks like Tailwind CSS offer more flexibility, Bootstrap's comprehensive documentation and wide adoption make it a strong choice for projects requiring quick turnaround times and strong cross-browser compatibility.</p>"
"SASS, SCSS, LESS, and Stylus",Adopt,Languages & Frameworks,FALSE,no change,"<p><a href=""https://sass-lang.com/"" target=""_blank"" aria-label=""SASS. This is an external link. Opens in new tab"" class=""pop-out""><strong>SASS/SCSS</strong><span class=""pop-out-icon""></span></a>, <a href=""http://lesscss.org/"" target=""_blank"" aria-label=""LESS. This is an external link. Opens in new tab"" class=""pop-out""><strong>LESS</strong><span class=""pop-out-icon""></span></a>, and <a href=""https://stylus-lang.com/"" target=""_blank"" aria-label=""Stylus. This is an external link. Opens in new tab"" class=""pop-out""><strong>Stylus</strong><span class=""pop-out-icon""></span></a> are popular CSS preprocessors that enhance traditional CSS with advanced features like variables, mixins, nesting, and functions, enabling more maintainable and scalable stylesheets. These tools help streamline the writing of complex styles, reduce redundancy, and improve the developer experience.</p>
<p>At Mable, we leverage SASS/SCSS for most of our projects, as it provides a well-established and widely supported ecosystem with extensive community resources. LESS and Stylus are also considered for specific use cases, with LESS being more common in legacy projects, while Stylus appeals for its minimalistic syntax and flexibility. While these preprocessors can be powerful in large-scale projects, our current focus is on ensuring consistent use of SASS/SCSS due to its widespread adoption, compatibility, and integration with modern front-end tools and frameworks like Webpack and PostCSS.</p>"
Ruby,Adopt,Languages & Frameworks,FALSE,no change,"<p><a href=""https://www.ruby-lang.org/"" target=""_blank"" aria-label=""Ruby. This is an external link. Opens in new tab"" class=""pop-out""><strong>Ruby</strong><span class=""pop-out-icon""></span></a> is a dynamic, open-source programming language known for its simplicity and developer-friendly syntax. It emphasizes readability and productivity, making it an ideal choice for rapid application development. Ruby is particularly well-known for its association with the **Ruby on Rails** framework, which accelerates web application development through convention over configuration and an extensive ecosystem of libraries and tools. At Mable, Ruby remains a key part of our back-end stack, especially for building robust, scalable web applications. Its focus on clean, concise code and developer happiness aligns well with our goals of building maintainable and efficient software solutions. While newer technologies continue to emerge, Ruby’s mature ecosystem, active community, and well-established best practices keep it a reliable and effective choice for web development.</p>"
Contentful,Assess,Platforms,FALSE,no change,"<p><a href=""https://www.contentful.com/"" target=""_blank"" aria-label=""Contentful. This is an external link. Opens in new tab"" class=""pop-out""><strong>Contentful</strong><span class=""pop-out-icon""></span></a> is a powerful, flexible content management system (CMS) that enables teams to deliver content across multiple channels with ease. As a headless CMS, Contentful allows content to be stored in a structured format and delivered through APIs to any device or platform, providing greater flexibility and scalability for modern web applications. At Mable, Contentful offers a reliable solution for managing content in a way that supports both structured data and rich media, while integrating seamlessly with our front-end frameworks and other platforms. With its robust API, customisation options, and strong developer ecosystem, Contentful empowers us to create dynamic, multi-platform experiences that scale with our needs, making it a core part of our content strategy moving forward.</p>"
GitHub Actions,Adopt,Platforms,FALSE,no change,"<p><a href=""https://github.com/features/actions"" target=""_blank"" aria-label=""GitHub Actions. This is an external link. Opens in new tab"" class=""pop-out""><strong>GitHub Actions</strong><span class=""pop-out-icon""></span></a> is an automation platform that enables continuous integration and continuous deployment (CI/CD) directly within GitHub repositories. With GitHub Actions, teams can automate workflows for tasks like testing, building, and deploying code, all without leaving the GitHub ecosystem. Its flexibility allows for complex workflows with triggers, dependencies, and conditions, enabling seamless automation for various development pipelines. At Mable, we use GitHub Actions to streamline our build and deployment processes, improving efficiency and consistency across our projects. The deep integration with GitHub, combined with an expansive set of pre-built actions and a growing ecosystem, makes GitHub Actions an essential tool for managing our CI/CD needs and enhancing our development workflows.</p>"
AWS,Adopt,Platforms,FALSE,no change,"<p><a href=""https://aws.amazon.com/"" target=""_blank"" aria-label=""AWS. This is an external link. Opens in new tab"" class=""pop-out""><strong>AWS (Amazon Web Services)</strong><span class=""pop-out-icon""></span></a> is a comprehensive and widely adopted cloud computing platform that provides a wide range of services, including computing power, storage, databases, networking, machine learning, and more. AWS allows businesses to scale their infrastructure as needed, providing on-demand resources that help reduce costs and improve flexibility. At Mable, we rely on AWS for hosting our applications, managing databases, handling file storage, and managing scalable compute resources through services like EC2, S3, and CloudFront. The robust set of tools and global infrastructure make AWS a cornerstone of our cloud strategy, enabling us to deploy, monitor, and scale applications efficiently while maintaining high availability and security.</p>"
Electron,Assess,Platforms,FALSE,no change,"<p><a href=""https://www.electronjs.org/"" target=""_blank"" aria-label=""Electron. This is an external link. Opens in new tab"" class=""pop-out""><strong>Electron</strong><span class=""pop-out-icon""></span></a> is an open-source framework that allows developers to build cross-platform desktop applications using web technologies such as HTML, CSS, and JavaScript. By combining the Chromium rendering engine and Node.js, Electron enables the creation of native desktop applications with a single codebase that works across Windows, macOS, and Linux. At Mable, we use Electron to deliver desktop applications that leverage our existing web application stack while ensuring a seamless experience across multiple operating systems. Its ease of use and large ecosystem of libraries and tools make Electron an ideal choice for building powerful, modern desktop apps, though it does come with challenges related to application size and performance, which require careful optimization for production use.</p>"
Kubernetes,Trial,Platforms,FALSE,no change,"<p><a href=""https://kubernetes.io/"" target=""_blank"" aria-label=""Kubernetes. This is an external link. Opens in new tab"" class=""pop-out""><strong>Kubernetes</strong><span class=""pop-out-icon""></span></a> is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. Kubernetes abstracts away much of the complexity associated with managing large-scale container environments, providing powerful features such as auto-scaling, load balancing, and self-healing. At Mable, Kubernetes is integral to our microservices architecture, enabling us to efficiently deploy, manage, and scale our applications across various environments, from development to production. With its growing ecosystem and strong support for hybrid and multi-cloud environments, Kubernetes helps ensure reliability, scalability, and continuous delivery in our platform infrastructure, making it a key tool for modern application deployment and management.</p>"
AWS Lambda,Trial,Platforms,FALSE,no change,"<p><a href=""https://aws.amazon.com/lambda/"" target=""_blank"" aria-label=""AWS Lambda. This is an external link. Opens in new tab"" class=""pop-out""><strong>AWS Lambda</strong><span class=""pop-out-icon""></span></a> is a serverless compute service that lets you run code without provisioning or managing servers. AWS Lambda automatically scales applications by running code in response to events such as HTTP requests, file uploads, or database changes. This on-demand execution model helps reduce costs by charging only for the compute time used, rather than for idle server capacity. At Mable, we leverage AWS Lambda for handling event-driven tasks and microservices, simplifying our architecture by eliminating the need for managing dedicated servers. With its seamless integration with other AWS services, Lambda provides a powerful and cost-effective solution for running scalable, high-performance applications in the cloud.</p>"
Amazon API Gateway,Trial,Platforms,FALSE,no change,"<p><a href=""https://aws.amazon.com/api-gateway/"" target=""_blank"" aria-label=""Amazon API Gateway. This is an external link. Opens in new tab"" class=""pop-out""><strong>Amazon API Gateway</strong><span class=""pop-out-icon""></span></a> is a fully managed service that makes it easy to create, publish, maintain, monitor, and secure APIs at any scale. It acts as a gateway for routing, traffic management, authorization, and access control to backend services, including AWS Lambda functions, EC2 instances, or any publicly accessible web service. API Gateway handles traffic spikes, supports the creation of RESTful APIs, WebSocket APIs, and even GraphQL endpoints, simplifying API management. At Mable, we use Amazon API Gateway to create secure, scalable APIs that integrate seamlessly with our AWS infrastructure. Its tight integration with AWS Lambda and other AWS services makes it an ideal choice for building and deploying microservices and serverless architectures while reducing the operational overhead of managing infrastructure.</p>"
Docker,Hold,Platforms,FALSE,moved out,"<p><a href=""https://www.docker.com/"" target=""_blank"" aria-label=""Docker. This is an external link. Opens in new tab"" class=""pop-out""><strong>Docker</strong><span class=""pop-out-icon""></span></a> is a platform for developing, shipping, and running applications inside lightweight, portable containers. Docker containers package an application and its dependencies into a single unit, ensuring consistency across different environments, from development to production. It allows developers to run applications in isolated environments, reducing conflicts between dependencies and improving deployment efficiency. At Mable, Docker plays a crucial role in our DevOps pipeline, enabling us to easily build, test, and deploy applications across various environments. Its support for containerization, scalability, and integration with orchestration tools like Kubernetes allows us to manage complex applications with ease, providing both speed and flexibility in our development and deployment processes.</p>"
AWS ECS,Trial,Platforms,FALSE,no change,"<p><a href=""https://aws.amazon.com/ecs/"" target=""_blank"" aria-label=""AWS ECS. This is an external link. Opens in new tab"" class=""pop-out""><strong>AWS ECS (Elastic Container Service)</strong><span class=""pop-out-icon""></span></a> is a fully managed container orchestration service that simplifies the deployment, management, and scaling of containerized applications using Docker. ECS supports both microservices and monolithic applications, providing a seamless environment for running containers at scale. It integrates natively with other AWS services such as IAM, CloudWatch, and ELB to enhance security, monitoring, and load balancing. At Mable, we use ECS for orchestrating and managing Docker containers, enabling efficient scaling and resource management without needing to manage the underlying infrastructure. With ECS's support for both EC2 instances and AWS Fargate for serverless compute, it offers flexibility in how we deploy and manage our containerized applications, streamlining our development and operational workflows.</p>"
Redis,Trial,Platforms,FALSE,no change,"<p><a href=""https://redis.io/"" target=""_blank"" aria-label=""Redis. This is an external link. Opens in new tab"" class=""pop-out""><strong>Redis</strong><span class=""pop-out-icon""></span></a> is an open-source, in-memory data store that is commonly used as a cache, message broker, and task queue. Known for its high performance and low latency, Redis supports a variety of data structures such as strings, hashes, lists, sets, and more, making it a versatile tool for a wide range of use cases. At Mable, we use Redis to enhance application performance by caching frequently accessed data, reducing database load, and speeding up response times. Additionally, Redis is integral to our real-time messaging systems and task management workflows, offering both reliability and scalability. Its rich set of features and widespread adoption in the industry make Redis a key component of our infrastructure for optimizing speed and efficiency in data processing and storage.</p>"
Node.js,Adopt,Platforms,FALSE,no change,"<p><a href=""https://nodejs.org/"" target=""_blank"" aria-label=""Node.js. This is an external link. Opens in new tab"" class=""pop-out""><strong>Node.js</strong><span class=""pop-out-icon""></span></a> is an open-source, cross-platform JavaScript runtime environment that enables developers to execute JavaScript code server-side. Built on Chrome's V8 JavaScript engine, Node.js allows for high-performance, event-driven, and non-blocking I/O operations, making it ideal for building scalable network applications. At Mable, Node.js powers several key backend services, enabling us to handle asynchronous tasks, manage APIs, and build real-time applications. Its extensive package ecosystem via npm and the ability to use a single language for both client-side and server-side development streamline our development process. Node.js's performance, scalability, and ease of use continue to make it a vital part of our infrastructure, particularly for microservices and serverless architectures.</p>"
Elastic Search,Hold,Platforms,FALSE,moved out,"<p><a href=""https://www.elastic.co/elasticsearch/"" target=""_blank"" aria-label=""ElasticSearch. This is an external link. Opens in new tab"" class=""pop-out""><strong>ElasticSearch</strong><span class=""pop-out-icon""></span></a> is a distributed, RESTful search and analytics engine designed for handling large volumes of data in real time. As part of the Elastic Stack, ElasticSearch allows for fast, scalable, and efficient full-text search, log analysis, and data aggregation across a wide variety of use cases, from enterprise applications to website search functionality. At Mable, we use ElasticSearch to power advanced search capabilities and provide quick access to large datasets in our platform, including structured and unstructured data. Its ability to scale horizontally and integrate seamlessly with other tools in the Elastic Stack (like Kibana for visualization and Logstash for log processing) makes it a valuable asset for building real-time search and analytics solutions, enhancing both performance and user experience.</p>"
Heroku,Hold,Platforms,FALSE,moved out,"<p><a href=""https://www.heroku.com/"" target=""_blank"" aria-label=""Heroku. This is an external link. Opens in new tab"" class=""pop-out""><strong>Heroku</strong><span class=""pop-out-icon""></span></a> is a cloud platform that enables developers to build, run, and operate applications entirely in the cloud. Known for its simplicity and ease of use, Heroku abstracts away much of the complexity of infrastructure management, allowing developers to focus on writing code. It supports multiple programming languages, including Ruby, Node.js, Python, and Java, and provides a variety of add-ons for databases, caching, and monitoring. At Mable, we use Heroku for rapid prototyping, application deployment, and hosting smaller services. Its managed environment and seamless integration with third-party services make it an excellent choice for building and scaling applications quickly without the overhead of managing infrastructure. While it may not be as customizable as more complex cloud platforms, its speed and ease of use remain key benefits for specific use cases.</p>"
OAuth,Adopt,Platforms,FALSE,no change,"<p><a href=""https://oauth.net/"" target=""_blank"" aria-label=""OAuth. This is an external link. Opens in new tab"" class=""pop-out""><strong>OAuth</strong><span class=""pop-out-icon""></span></a> is an open-standard authorisation protocol that allows third-party applications to securely access user data without exposing their credentials. OAuth enables users to grant permissions to applications, such as accessing their social media profiles or integrating with other services, while maintaining control over their account security. It is widely used for single sign-on (SSO) scenarios, ensuring that users can authenticate across multiple platforms using a single set of credentials. At Mable, we leverage OAuth for secure integrations with external services and to provide seamless user authentication flows. By implementing OAuth, we can ensure that sensitive user data is protected, while offering users a smooth experience when accessing our platform via third-party applications or services.</p>"
Warp,Adopt,Tools,FALSE,moved in,"<p><a href=""https://www.warp.dev/"" target=""_blank"" aria-label=""Warp. This is an external link. Opens in new tab"" class=""pop-out""><strong>Warp</strong><span class=""pop-out-icon""></span></a> is a modern terminal designed to boost developer productivity with a sleek, user-friendly interface and advanced features. Unlike traditional terminals, Warp introduces a highly visual experience, enabling developers to interact with their shell environment through rich, contextual output. It supports collaboration, with real-time sharing of terminal sessions, and integrates with tools like GitHub, making it easier to manage code repositories directly from the terminal. At Mable, we are exploring Warp for streamlining our development workflows, enhancing team collaboration, and improving productivity with its fast, intuitive interface. With its ability to handle complex command outputs and provide an enriched user experience, Warp is becoming a valuable tool for modern software development.</p>"
GitHub Copilot,Assess,Tools,FALSE,no change,"<p><a href=""https://copilot.github.com/"" target=""_blank"" aria-label=""GitHub Copilot. This is an external link. Opens in new tab"" class=""pop-out""><strong>GitHub Copilot</strong><span class=""pop-out-icon""></span></a> is an AI-powered code completion tool developed by GitHub in collaboration with OpenAI. Integrated directly into IDEs like Visual Studio Code, Copilot suggests code snippets, functions, and even entire blocks of code based on natural language prompts or the context of your current code. It helps accelerate development by providing relevant code suggestions and reducing the need to search for boilerplate code or documentation. At Mable, we are evaluating GitHub Copilot to enhance productivity and improve the quality of code by offering smart suggestions and reducing repetitive tasks. While it serves as a powerful assistant, we maintain a careful review process to ensure suggestions align with coding standards and project requirements.</p>"
Chromatic,Adopt,Tools,FALSE,moved in,"<p><a href=""https://www.chromatic.com/"" target=""_blank"" aria-label=""Chromatic. This is an external link. Opens in new tab"" class=""pop-out""><strong>Chromatic</strong><span class=""pop-out-icon""></span></a> is a visual testing and collaboration platform designed for UI components. Built on top of Storybook, Chromatic automates visual regression testing by capturing snapshots of your UI and comparing them to previous versions, highlighting any visual changes. This helps to ensure UI consistency across development cycles. It also offers powerful collaboration features, allowing teams to review, comment on, and approve design changes in a shared environment. At Mable, we leverage Chromatic to streamline our component development process, ensuring that UI changes are visually validated and aligned with our design standards. It integrates seamlessly with our CI/CD pipeline, making it an essential tool for maintaining a high-quality user interface while fostering collaboration between developers and designers.</p>"
ChatGPT,Assess,Tools,FALSE,moved in,"<p><a href=""https://chat.openai.com/"" target=""_blank"" aria-label=""ChatGPT. This is an external link. Opens in new tab"" class=""pop-out""><strong>ChatGPT</strong><span class=""pop-out-icon""></span></a> is an advanced AI-powered conversational model developed by OpenAI that can assist with a wide range of tasks, from answering questions to providing coding support and generating content. It leverages the GPT (Generative Pre-trained Transformer) architecture to understand and generate human-like text based on user input. At Mable, we utilize ChatGPT for various internal processes, including helping with documentation, generating code snippets, providing troubleshooting advice, and facilitating idea brainstorming sessions. By integrating ChatGPT into our workflow, we aim to enhance productivity, streamline communication, and assist our team with real-time solutions and suggestions. While ChatGPT is a valuable tool for automating certain tasks, we ensure that its outputs are reviewed to maintain accuracy and quality.</p>"
TruffleHog ,Assess,Tools,FALSE,moved in,"<p><a href=""https://github.com/dxa4481/truffleHog"" target=""_blank"" aria-label=""TruffleHog. This is an external link. Opens in new tab"" class=""pop-out""><strong>TruffleHog</strong><span class=""pop-out-icon""></span></a> is a security tool designed to detect high-entropy strings and secrets such as API keys, tokens, and passwords in your git history. By scanning Git repositories for sensitive information that may have been accidentally committed, TruffleHog helps prevent the accidental exposure of confidential data. It provides real-time detection and can be integrated into CI/CD pipelines for continuous security monitoring. At Mable, we use TruffleHog to ensure that no sensitive data is accidentally committed to our repositories, enhancing our security posture and reducing the risk of leaks. This tool is essential for maintaining secure development practices and protecting sensitive information throughout the development lifecycle.</p>"
Podman,Assess,Tools,FALSE,moved in,"<p><a href=""https://podman.io/"" target=""_blank"" aria-label=""Podman. This is an external link. Opens in new tab"" class=""pop-out""><strong>Podman</strong><span class=""pop-out-icon""></span></a> is an open-source container management tool that is compatible with Docker but offers several advantages, such as rootless container management and daemonless architecture. Podman allows developers to build, manage, and run containers without requiring a background service, providing enhanced security and flexibility, especially in multi-user environments. It also supports Docker CLI commands, making it easy to transition from Docker-based workflows. At Mable, we are exploring Podman for containerization tasks, particularly for environments where security and ease of use are top priorities. With Podman’s ability to run containers as non-root users and its integration with Kubernetes, it is a strong contender for managing containerized applications in a secure, efficient manner.</p>"
Dependabot ,Adopt,Tools,FALSE,no change,"<p><a href=""https://github.com/dependabot"" target=""_blank"" aria-label=""Dependabot. This is an external link. Opens in new tab"" class=""pop-out""><strong>Dependabot</strong><span class=""pop-out-icon""></span></a> is a tool designed to automate dependency management in software projects. Integrated with GitHub, Dependabot helps developers keep their dependencies up to date by automatically generating pull requests (PRs) to update outdated packages. It works across multiple ecosystems, including JavaScript, Ruby, Python, and more. At Mable, we rely on Dependabot to ensure that our dependencies are always current, reducing the risk of security vulnerabilities and improving code stability. With automated version updates and compatibility checks, Dependabot streamlines our workflow and helps maintain a secure, up-to-date codebase without the manual effort typically required for dependency updates.</p>"
Litmus ,Assess,Tools,FALSE,moved in,"<p><a href=""https://www.litmus.com/"" target=""_blank"" aria-label=""Litmus. This is an external link. Opens in new tab"" class=""pop-out""><strong>Litmus</strong><span class=""pop-out-icon""></span></a> is a powerful email testing and analytics platform that helps developers and marketers ensure email campaigns render correctly across different email clients and devices. It provides a suite of tools for creating, testing, and optimizing email designs, including pre-send email previews, automated testing, and real-time analytics. At Mable, we are using Litmus to streamline the process of email development, ensuring that all communications and notifications are consistent, responsive, and visually appealing across all platforms. With its collaborative features, Litmus also facilitates better team communication and alignment during the email creation process, making it an invaluable tool for managing email campaigns effectively.</p>"
Trivy,Assess,Tools,FALSE,moved in,"<p><a href=""https://github.com/aquasecurity/trivy"" target=""_blank"" aria-label=""Trivy. This is an external link. Opens in new tab"" class=""pop-out""><strong>Trivy</strong><span class=""pop-out-icon""></span></a> is an open-source vulnerability scanner designed to detect security issues in containers, infrastructure as code (IaC), and Git repositories. Trivy scans container images, filesystems, and GitHub repositories for known vulnerabilities in dependencies and misconfigurations, helping developers identify and mitigate risks early in the development lifecycle. It integrates seamlessly with CI/CD pipelines to provide continuous vulnerability scanning and supports multiple package managers across various programming languages. At Mable, we use Trivy to enhance the security of our containerized applications, ensuring that our environments are free from vulnerabilities and compliant with best practices. Its speed and simplicity make it an effective tool for continuous security monitoring without adding complexity to our development process.</p>"
Yarn,Adopt,Tools,FALSE,no change,"<p><a href=""https://yarnpkg.com/"" target=""_blank"" aria-label=""Yarn. This is an external link. Opens in new tab"" class=""pop-out""><strong>Yarn</strong><span class=""pop-out-icon""></span></a> is a fast, reliable, and secure package manager for JavaScript and Node.js projects. It was developed by Facebook to address issues with the original npm (Node Package Manager), offering features such as deterministic dependency resolution, faster installs through parallelization, and an offline mode. Yarn also ensures consistency across environments with its lockfile, making it an excellent choice for managing dependencies in large-scale projects. At Mable, we use Yarn for managing our front-end and back-end JavaScript dependencies, as it provides a more streamlined experience, with improved speed and reliability over npm. Yarn integrates seamlessly with our CI/CD pipeline, ensuring that our build and deployment processes are both efficient and consistent.</p>"
Cypress,Adopt,Tools,FALSE,no change,"<p><a href=""https://www.cypress.io/"" target=""_blank"" aria-label=""Cypress. This is an external link. Opens in new tab"" class=""pop-out""><strong>Cypress</strong><span class=""pop-out-icon""></span></a> is a powerful end-to-end testing framework designed for modern web applications. Unlike traditional testing tools, Cypress runs directly in the browser, providing fast, reliable, and real-time feedback for testing user interactions, UI components, and overall application behavior. It simplifies the process of writing, debugging, and running tests by offering features like time travel, automatic waiting, and a clear, user-friendly dashboard. At Mable, we leverage Cypress to ensure that our web applications are thoroughly tested, from unit to integration to end-to-end levels. Its ability to simulate user behavior and catch errors in real-time enhances our ability to ship high-quality, bug-free features with confidence. Cypress fits seamlessly into our CI/CD pipeline, allowing for continuous testing and improving overall development efficiency.</p>"
Figma,Adopt,Tools,FALSE,no change,"<p><a href=""https://www.figma.com/"" target=""_blank"" aria-label=""Figma. This is an external link. Opens in new tab"" class=""pop-out""><strong>Figma</strong><span class=""pop-out-icon""></span></a> is a cloud-based design tool that enables real-time collaboration, making it easy for design teams to create, prototype, and share designs seamlessly. Figma’s intuitive interface and powerful features allow for collaborative design workflows, version control, and easy handoff to developers. Its cloud-based nature means that teams can work from anywhere and share updates in real-time, streamlining the feedback and iteration process. At Mable, Figma is a key tool for creating and refining UI/UX designs for our web applications. It helps ensure consistency in design, improves collaboration between design and development teams, and accelerates the design-to-development handoff. Figma's ability to integrate with other tools in our workflow makes it a cornerstone in our design process.</p>"
Commitizen,Adopt,Tools,FALSE,no change,"<p><a href=""https://github.com/commitizen/cz-cli"" target=""_blank"" aria-label=""Commitizen. This is an external link. Opens in new tab"" class=""pop-out""><strong>Commitizen</strong><span class=""pop-out-icon""></span></a> is a command-line tool designed to help developers follow conventional commit standards, ensuring that commit messages are consistent and structured. By enforcing a standardized format for commit messages, Commitizen helps improve readability, simplifies release notes generation, and enhances the overall maintainability of the codebase. It integrates with Git hooks to automatically guide developers in crafting meaningful and consistent commit messages. At Mable, we use Commitizen as part of our workflow to maintain clean, well-documented commit histories, streamline semantic versioning, and facilitate automated changelog generation. Its integration with tools like Semantic Release also helps automate versioning and releases, making it an essential tool for maintaining project quality and clarity in our development process.</p>"
ESLint,Adopt,Tools,FALSE,no change,"<p><a href=""https://eslint.org/"" target=""_blank"" aria-label=""ESLint. This is an external link. Opens in new tab"" class=""pop-out""><strong>ESLint</strong><span class=""pop-out-icon""></span></a> is a widely used static code analysis tool for identifying and fixing problems in JavaScript and TypeScript code. It enforces coding standards, catches common programming errors, and helps maintain code quality by analyzing the code for potential issues and offering recommendations for improvement. ESLint is highly customizable, allowing teams to define and enforce their own coding rules, integrate with IDEs, and integrate into CI/CD pipelines for continuous linting. At Mable, ESLint is an integral part of our development process, ensuring that our JavaScript and TypeScript code adheres to best practices, remains consistent, and is free from common bugs. By catching errors early and encouraging uniform code styles, ESLint helps improve productivity, reduce technical debt, and maintain a high standard of code quality across our projects.</p>"
Terraform,Adopt,Tools,FALSE,no change,"<p><a href=""https://www.terraform.io/"" target=""_blank"" aria-label=""Terraform. This is an external link. Opens in new tab"" class=""pop-out""><strong>Terraform</strong><span class=""pop-out-icon""></span></a> is an open-source infrastructure as code (IaC) tool that enables users to define, provision, and manage cloud infrastructure using declarative configuration files. Terraform allows for the automation and management of resources across multiple cloud providers and services, ensuring infrastructure is reproducible, consistent, and version-controlled. It facilitates the creation, modification, and destruction of infrastructure resources such as compute instances, networks, and storage systems, making it a key tool in managing cloud environments. At Mable, we use Terraform to manage our cloud infrastructure across AWS and other platforms, ensuring that our infrastructure is scalable, maintainable, and easily replicable. Terraform’s state management, modules, and integration with CI/CD pipelines help us automate deployment workflows, reduce manual configuration errors, and maintain infrastructure consistency.</p>"
git-secrets,Adopt,Tools,FALSE,no change,"<p><a href=""https://github.com/awslabs/git-secrets"" target=""_blank"" aria-label=""git-secrets. This is an external link. Opens in new tab"" class=""pop-out""><strong>git-secrets</strong><span class=""pop-out-icon""></span></a> is a tool that prevents sensitive data such as passwords, API keys, and other secrets from being committed into Git repositories. By scanning commit histories and code changes, git-secrets helps ensure that sensitive information is never exposed in version control. It integrates seamlessly with Git hooks to check for common secret patterns and prevent accidental inclusion of sensitive data during commits, reducing the risk of security breaches. At Mable, we use git-secrets as part of our security practices to protect sensitive data and ensure that secrets are properly managed and stored in secure locations. This tool helps automate the detection of potential security risks and is a vital part of our efforts to maintain secure development workflows and safeguard our applications.</p>"
Visual Studio Code,Adopt,Tools,FALSE,no change,"<p><a href=""https://code.visualstudio.com/"" target=""_blank"" aria-label=""Visual Studio Code. This is an external link. Opens in new tab"" class=""pop-out""><strong>Visual Studio Code</strong><span class=""pop-out-icon""></span></a> is a lightweight, powerful, and extensible code editor developed by Microsoft. It supports a wide range of programming languages and offers features such as debugging, intelligent code completion, Git integration, and an extensive library of extensions. VSCode’s flexibility allows developers to customize their workflows, integrate with version control systems, and enhance productivity with tools like linting, IntelliSense, and live collaboration. At Mable, VSCode is the primary code editor used across our development teams due to its speed, ease of use, and rich ecosystem of extensions. It seamlessly integrates with our CI/CD pipeline and various tools, improving code quality and developer efficiency. With a focus on simplicity and versatility, VSCode remains a central part of our development environment for both front-end and back-end projects.</p>"
Prettier,Adopt,Tools,FALSE,no change,"<p><a href=""https://prettier.io/"" target=""_blank"" aria-label=""Prettier. This is an external link. Opens in new tab"" class=""pop-out""><strong>Prettier</strong><span class=""pop-out-icon""></span></a> is an opinionated code formatter that automatically formats code according to a consistent style. It supports a wide range of languages, including JavaScript, TypeScript, HTML, CSS, and more. Prettier helps enforce code consistency across teams by eliminating debates over formatting and allowing developers to focus on the logic of the code. It integrates seamlessly with version control systems, IDEs, and CI/CD pipelines, ensuring that all code is formatted the same way regardless of the developer or tool used. At Mable, we use Prettier to ensure consistent code style across our front-end and back-end projects, reduce the time spent on formatting discussions, and improve overall code readability. Prettier helps automate code formatting as part of our development process, ensuring a cleaner and more maintainable codebase.</p>"
Buildkite ,Assess,Tools,FALSE,moved in,"<p><a href=""https://buildkite.com/"" target=""_blank"" aria-label=""Buildkite. This is an external link. Opens in new tab"" class=""pop-out""><strong>Buildkite</strong><span class=""pop-out-icon""></span></a> is a hybrid continuous integration and continuous delivery (CI/CD) platform that enables teams to run fast and scalable builds on their own infrastructure while leveraging cloud-based parallel execution. With its ability to integrate seamlessly with version control systems like GitHub, GitLab, and Bitbucket, Buildkite provides a flexible and customizable CI/CD pipeline that can scale as needed. Its agent-based architecture allows for distributed builds on self-hosted or cloud infrastructure, giving teams full control over their environments. At Mable, we use Buildkite to automate our testing, build, and deployment workflows, ensuring that our software is continuously integrated and delivered efficiently. Buildkite’s extensibility and performance allow us to run complex workflows with speed and reliability, making it a key tool in maintaining high-quality standards across our development pipeline.</p>"
Postman,Adopt,Tools,FALSE,no change,"<p><a href=""https://www.postman.com/"" target=""_blank"" aria-label=""Postman. This is an external link. Opens in new tab"" class=""pop-out""><strong>Postman</strong><span class=""pop-out-icon""></span></a> is a popular API development and testing tool that simplifies the process of building, testing, and documenting APIs. It provides a user-friendly interface for making API requests, organizing them into collections, and automating testing workflows. With features such as request chaining, environment management, and integrations with version control systems, Postman streamlines the development and debugging process for API-based applications. At Mable, we rely on Postman to test and validate our APIs, ensuring they function as expected before deployment. It plays a key role in our development process by helping us maintain consistent API behaviors and improve collaboration between developers and other teams. With its extensive features for mocking, monitoring, and documenting APIs, Postman is essential for efficient API testing and integration.</p>"
Swagger,Adopt,Tools,FALSE,no change,"<p><a href=""https://swagger.io/"" target=""_blank"" aria-label=""Swagger. This is an external link. Opens in new tab"" class=""pop-out""><strong>Swagger</strong><span class=""pop-out-icon""></span></a> is a suite of tools for designing, building, and documenting RESTful APIs. It includes an API definition language (OpenAPI Specification) and a set of tools that allow developers to create interactive API documentation, generate client libraries, and perform API testing. Swagger’s interactive interface allows users to explore API endpoints and test them directly from the documentation, making it easier to understand and use APIs. At Mable, we use Swagger to document our APIs, ensuring that our API definitions are standardized and easily accessible for both internal developers and external partners. Its ability to generate real-time, interactive documentation reduces the risk of miscommunication and helps us maintain consistency across API implementations. Swagger is a key part of our API lifecycle management, improving both development and integration processes.</p>"
Gulp ,Adopt,Tools,FALSE,no change,"<p><a href=""https://gulpjs.com/"" target=""_blank"" aria-label=""Gulp. This is an external link. Opens in new tab"" class=""pop-out""><strong>Gulp</strong><span class=""pop-out-icon""></span></a> is a task runner that automates common development tasks, such as minifying code, compiling Sass or Less, optimizing images, and bundling JavaScript. Gulp uses a streaming build system, where tasks are defined as JavaScript functions, making it highly customizable and extensible. Its speed and simplicity make it a popular choice for automating repetitive tasks in the front-end development workflow. At Mable, we use Gulp to streamline our build processes, improve productivity, and ensure consistency across our development environments. By automating tasks such as code linting, file watching, and asset management, Gulp helps us save time and focus on more important aspects of development while maintaining an efficient and reliable build pipeline.</p>"
Vagrant,Hold,Tools,FALSE,moved in,"<p><a href=""https://www.vagrantup.com/"" target=""_blank"" aria-label=""Vagrant. This is an external link. Opens in new tab"" class=""pop-out""><strong>Vagrant</strong><span class=""pop-out-icon""></span></a> is an open-source tool for building and managing virtualized development environments. By using Vagrant, developers can create consistent, reproducible environments across different machines, reducing the ""works on my machine"" problem. It integrates with various providers like VirtualBox, VMware, and AWS, allowing teams to manage and configure virtual machines through simple configuration files. Vagrant is ideal for setting up isolated environments that mimic production, making it easier to test applications in a controlled setting. At Mable, we use Vagrant to ensure consistency in our development environments, allowing developers to quickly spin up new virtual machines or share configurations across teams. This helps improve collaboration, reduce setup time, and ensure that all team members are working in similar environments, leading to more reliable software development and deployment processes.</p>"
Sonar ,Assess,Tools,FALSE,moved in,"<p><a href=""https://www.sonarqube.org/"" target=""_blank"" aria-label=""SonarQube. This is an external link. Opens in new tab"" class=""pop-out""><strong>SonarQube</strong><span class=""pop-out-icon""></span></a> is an open-source platform for continuous inspection of code quality. It provides static code analysis to detect bugs, vulnerabilities, and code smells, and offers detailed insights into code coverage, duplication, complexity, and maintainability. SonarQube integrates with CI/CD pipelines to provide real-time feedback, helping development teams maintain high-quality standards throughout the development process. At Mable, we use SonarQube to monitor and improve the quality of our codebase, ensuring that we identify and address potential issues early. Its integration with our build pipeline helps automate code reviews, track technical debt, and enforce coding best practices, ultimately contributing to more reliable and maintainable software.</p>"
GitHub,Adopt,Tools,FALSE,no change,"<p><a href=""https://github.com/"" target=""_blank"" aria-label=""GitHub. This is an external link. Opens in new tab"" class=""pop-out""><strong>GitHub</strong><span class=""pop-out-icon""></span></a> is a web-based platform for version control and collaboration, built around Git, the distributed version control system. GitHub allows teams to manage and share their code repositories, track issues, perform code reviews, and collaborate efficiently across various projects. It provides powerful tools for version control, including branching, pull requests, and merging, as well as integrations with a wide range of third-party applications. At Mable, we use GitHub as our primary platform for managing source code, reviewing contributions, and collaborating across teams. Its integration with CI/CD workflows, coupled with features like GitHub Actions for automating testing and deployment, enables us to streamline our development process and ensure seamless delivery of high-quality software. GitHub's collaborative features, like discussion boards and wikis, further enhance communication and knowledge sharing within the team.</p>"
Devbox ,Hold,Tools,FALSE,moved in,"<p><a href=""https://www.jetpack.io/devbox/"" target=""_blank"" aria-label=""Devbox. This is an external link. Opens in new tab"" class=""pop-out""><strong>Devbox</strong><span class=""pop-out-icon""></span></a> is a development environment manager designed to make it easy to spin up isolated and reproducible development environments. By leveraging containers, Devbox allows developers to quickly set up environments with all the necessary dependencies, configurations, and tools required for a specific project. This eliminates the need to manually configure environments on each developer’s machine, ensuring consistency and minimizing the “it works on my machine” problem. Devbox integrates seamlessly with existing workflows, making it simple to test applications across different environments or replicate production settings locally. At Mable, we use Devbox to streamline our development setup, improve consistency across teams, and reduce the overhead of managing complex development environments. It helps maintain a clean and repeatable development process, ensuring developers can focus on writing code instead of managing dependencies and configurations.</p>"
Splunk,Hold,Tools,FALSE,moved in,"<p><a href=""https://www.splunk.com/"" target=""_blank"" aria-label=""Splunk. This is an external link. Opens in new tab"" class=""pop-out""><strong>Splunk</strong><span class=""pop-out-icon""></span></a> is a platform designed for searching, monitoring, and analyzing machine-generated big data via a web-style interface. It provides powerful tools for ingesting and indexing log data, enabling real-time insights into system performance, security, and operational issues. Splunk supports a wide range of use cases, from monitoring application performance to security event management and compliance reporting. With its robust data analytics and visualization capabilities, Splunk helps teams troubleshoot issues faster and gain valuable insights from their logs. At Mable, we use Splunk to monitor application health, detect anomalies, and analyze logs in real-time. By leveraging Splunk's extensive capabilities, we ensure the reliability and security of our systems, as well as gain actionable insights to continuously improve our infrastructure and services.</p>"
Component Testing,Adopt,Techniques,FALSE,no change,"<p><strong>Component Testing</strong> is a testing technique that focuses on verifying the behavior of individual components in isolation, ensuring that they function correctly before being integrated into larger systems. This type of testing is crucial in modern front-end development, where applications are built using small, reusable components. By testing components individually, developers can quickly identify issues, ensure that each part of the application performs as expected, and improve code maintainability. Component tests typically focus on rendering components, simulating user interactions, validating UI updates, and checking for edge cases. At Mable, we emphasize component testing as part of our testing strategy to ensure that our UI components, such as buttons, forms, and modals, work as expected across various scenarios. This technique helps catch issues early, reduces the complexity of debugging, and improves overall code quality, contributing to a more stable and predictable user experience.</p>"
Threat modeling,Adopt,Techniques,FALSE,moved in,"<p><strong>Threat Modeling</strong> is a proactive security technique used to identify, evaluate, and mitigate potential security risks within a system or application. By analyzing the architecture, data flows, and potential attack vectors early in the development process, teams can design systems with built-in security measures to prevent breaches and vulnerabilities. The process involves identifying assets that need protection, determining potential threats and vulnerabilities, assessing their impact and likelihood, and implementing controls to mitigate those risks. At Mable, we incorporate threat modeling into our development lifecycle to ensure that security is integrated from the start, rather than being added later. This technique helps us identify critical security flaws, prioritize mitigation strategies, and reduce the risk of security incidents, ultimately contributing to more secure and resilient systems.</p>"
SLIs and SLOs,Adopt,Techniques,FALSE,moved in,"<p><strong>SLIs (Service Level Indicators)</strong> and <strong>SLOs (Service Level Objectives)</strong> are essential metrics in managing the reliability and performance of services, guiding teams to meet user expectations and maintain high-quality systems. SLIs are quantitative measures that track the performance of a service, such as response time, error rate, or availability, providing a snapshot of how well the system is performing. SLOs are the target values or thresholds that the service aims to achieve for those SLIs, such as ""99.9% availability"" or ""less than 100ms response time."" Together, SLIs and SLOs help define clear expectations for service reliability and performance, aligning engineering efforts with business goals. At Mable, we use SLIs and SLOs to track the reliability of our services and set clear objectives for performance, ensuring that we meet both internal and external user expectations. This approach helps us prioritize improvements, respond to incidents more effectively, and ensure that we maintain a high level of service reliability across our platforms.</p>"
GitHub push protection,Adopt,Techniques,FALSE,no change,"<p><strong>GitHub Push Protection</strong> is a set of features and practices that help prevent unwanted or unauthorized code changes from being pushed to a repository. It includes tools like branch protection rules, required pull requests, status checks, and mandatory code reviews, which ensure that code meets specific criteria before it is merged into important branches. Push protection also includes safeguards such as preventing force pushes, enforcing commit signing, and requiring that tests pass before merging. These protections help maintain code quality, prevent accidental errors or malicious changes, and ensure that only thoroughly reviewed and tested code is deployed. At Mable, we use GitHub push protection to enforce strict quality control, ensuring that every code change is properly reviewed, tested, and validated before being integrated into production. By leveraging these controls, we enhance collaboration, reduce the risk of bugs and security vulnerabilities, and maintain a smooth and secure development workflow.</p>"
Mob and Pair Programming,Trial,Techniques,FALSE,no change,"<p><strong>Mob and Pair Programming</strong> are collaborative development techniques that encourage real-time teamwork, knowledge sharing, and improved code quality. In <strong>Pair Programming</strong>, two developers work together at a single workstation—one writes code (the ""driver""), while the other reviews each line of code (the ""observer"" or ""navigator""), providing feedback, discussing approaches, and considering edge cases. This approach enhances code quality, reduces the likelihood of errors, and fosters knowledge sharing between team members. In <strong>Mob Programming</strong>, the entire development team collaborates at a single computer, with one person driving the keyboard while others contribute ideas, suggest solutions, and discuss implementation strategies. This technique accelerates problem-solving, promotes collective ownership of code, and encourages diverse perspectives in decision-making. At Mable, we use both mob and pair programming to increase collaboration, improve code quality, and ensure that knowledge is shared across the team. These practices help us tackle complex challenges more effectively, improve team communication, and foster a collaborative development culture.</p>"
Feature Toggling,Trial,Techniques,FALSE,no change,"<p><strong>Feature Toggling</strong> is a software development practice that allows features to be enabled or disabled at runtime without deploying new code. This technique is used to control the exposure of new functionality, making it possible to test features in production, manage feature releases, or quickly disable a feature if issues arise. Feature toggles can be used for various purposes, including enabling or disabling experimental features, conducting A/B testing, rolling out features gradually, or managing different configurations for different environments. At Mable, we use feature toggling to control the release of new features to users, allowing us to test new functionality in production with minimal risk. This technique also helps us decouple feature development from deployment, providing flexibility in how we deliver updates to our platform while ensuring a stable user experience.</p>"
Code Formatting,Adopt,Techniques,FALSE,no change,"<p><strong>Code Formatting</strong> is the practice of ensuring that code adheres to a consistent style guide, improving readability, maintainability, and collaboration among developers. It includes guidelines for indentation, spacing, naming conventions, and code organization, helping to avoid unnecessary formatting debates and making it easier for teams to work together. Code formatting tools, such as Prettier or ESLint for JavaScript, automate this process, ensuring that code is consistently formatted according to predefined rules. At Mable, we prioritize code formatting as part of our development workflow, using tools to automatically format code during commits and pull requests. This practice enhances code quality, reduces the cognitive load for developers, and makes it easier to understand and maintain code over time.</p>"
Continuous Delivery,Adopt,Techniques,FALSE,no change,"<p><strong>Continuous Delivery</strong> is a software development practice that ensures code changes are automatically built, tested, and prepared for release to production at any time. With Continuous Delivery, teams can confidently deliver software updates frequently and reliably by automating the process of integrating and deploying code changes. Continuous Delivery typically involves automated testing to validate code quality, integration checks, and automated deployment pipelines to push changes to staging or production environments. At Mable, we use Continuous Delivery to streamline our deployment process, ensuring that new features and bug fixes are available to users quickly and reliably. This approach reduces the risk of errors during manual deployment, speeds up feedback cycles, and enables rapid iteration while maintaining a high level of software quality.</p>"
Continuous Deployment,Adopt,Techniques,FALSE,no change,"<p><strong>Continuous Deployment</strong> is a software development practice where code changes are automatically released to production as soon as they pass automated testing and validation processes. Unlike Continuous Delivery, which prepares code for deployment but requires manual approval to go live, Continuous Deployment eliminates the need for human intervention in the release process. Every change that passes the automated tests is deployed directly to production, ensuring rapid delivery of new features, improvements, and bug fixes. At Mable, we embrace Continuous Deployment to streamline our release process, enabling frequent and reliable updates to production with minimal delays. This practice enhances agility, ensures quick bug fixes, and allows teams to respond to user feedback faster while maintaining high software quality through automated testing and monitoring.</p>"
